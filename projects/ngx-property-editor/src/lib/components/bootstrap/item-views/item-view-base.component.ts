import { Component, Input, OnChanges, OnInit, SimpleChanges } from '@angular/core';
import { ItemDefinition, ItemViewItemBaseComponent } from './item-view-item-base.component';
import { PEGlobalFunctions } from '../../../controller/pe-global-functions';

@Component({
  template: '',
})
export abstract class ItemViewBaseComponent implements OnInit, OnChanges {

  /**
   * You must define different IDs, if there are more than one instance
   * of this type of item view component on the same page.
   */
  @Input() public id: string = PEGlobalFunctions.generateRandomId();

  /**
   * Define labels and related template references for the view items here.
   *
   * @deprecated Please use the item child components instead of this array.
   * @example
   * <pe-tabs [id]="id + '-item-view'"
   *          [items]="[
   *            { buttonLabel: 'Item 1', contentTemplate: item1Template },
   *            { buttonLabel: 'Item 2', contentTemplate: item2Template },
   *          ]">
   * </pe-tabs>
   *
   * <ng-template #item1Template>
   *   ...
   * </ng-template>
   *
   * <ng-template #item2Template>
   *   ...
   * </ng-template>
   */
  @Input() public items: ItemDefinition[] = [];

  /** Displayed items generated by `updateItems()` from `items` and `registeredItemComponents`. */
  protected _items: ItemDefinition[] = [];

  /**
   * `ItemViewItemBaseComponent` implementations which can be put into the template content of an
   * `ItemViewBaseComponent` implementation. These item components contains the same information
   * as stored in the `items` property. The Function `updateItems()` combines both `items` and
   * `registeredItemComponents` into the unified array `_items`.
   */
  protected readonly registeredItemComponents: ItemViewItemBaseComponent[] = [];

  /**
   * If defined the item with the given label is initially selected.
   * Otherwise, the first item is initially selected.
   */
  @Input() public defaultItemLabel: string | undefined = undefined;

  /**
   * If defined the item with the given index is initially selected.
   * Otherwise, the first item is initially selected.
   * This property is only considered, if `defaultItemLabel` is not defined.
   */
  @Input() public defaultItemIndex: number | undefined = undefined;

  /**
   * Item index computed by `updateDefaultItemIndex()` using
   * the `defaultItemLabel` and the `items` configuration or `defaultItemIndex`.
   */
  protected _defaultItemIndex: number = 0;

  /**
   * By default, the last active item is saved in the `localStorage`
   * and reactivated at the next page load (requires `id`).
   * If this property is set to true, the last active item is not saved
   */
  @Input() public disableSaveLastActiveItem: boolean = false;

  public ngOnInit(): void {
    this.updateDefaultItemIndex();
  }

  public ngOnChanges(changes: SimpleChanges): void {
    if (changes.hasOwnProperty('items')) {
      this.updateItems();
    }
    if (changes.hasOwnProperty('defaultItemLabel') ||
      changes.hasOwnProperty('defaultItemIndex')) {
      this.updateDefaultItemIndex();
    }
  }

  /**
   * Called by implementations of `ItemViewItemBaseComponent` to register a new item component
   * @param itemComponentRef A reference to the item component.
   */
  public registerItemComponent(itemComponentRef: ItemViewItemBaseComponent): void {
    this.registeredItemComponents.push(itemComponentRef);
    this.updateItems();
  }

  /**
   * Called by implementations of `ItemViewItemBaseComponent` to unregister a destroyed item component
   * @param itemComponentRef A reference to the item component.
   */
  public unregisterItemComponent(itemComponentRef: ItemViewItemBaseComponent): void {
    const index: number = this.registeredItemComponents.indexOf(itemComponentRef);
    if (index < 0) return;
    this.registeredItemComponents.splice(index, 1);
    this.updateItems();
  }

  /**
   * Combine both `items` and `registeredItemComponents` into the unified array `_items`.
   * This function must be called when one of the following events occured:
   * - `items` changed
   * - an item component was registered or unregistered (`registeredItemComponents` changed)
   * - a property of one of the registered item components changed (called by `ItemViewItemBaseComponent.ngOnChanges`).
   */
  public updateItems(): void {
    setTimeout(() => {
      const items: ItemDefinition[] = [...this.items];
      for (const registeredItemComponent of this.registeredItemComponents) {
        items.push(registeredItemComponent);
      }
      items.sort((a, b) => {
        if (a?.order == undefined || b?.order == undefined) {
          if (a?.order == undefined && b?.order != undefined) return -1;
          if (a?.order != undefined && b?.order == undefined) return 1;
          return 0;
        }
        if (a.order < b.order) return -1;
        if (a.order > b.order) return 1;
        return 0;
      });
      this._items = items;

      this.updateDefaultItemIndex();
    }, 0);
  }

  // region Save default item in localStorage

  private readonly localStorageDefaultItemLabelKeyPrefix: string = 'item-view-default-item-';

  /**
   * Updates the `defaultItemIndex` based on the `defaultItemLabel`
   * (or last open item) and the `items` configuration.
   */
  protected updateDefaultItemIndex(): void {
    let defaultLabel: string | undefined = undefined;
    if (!this.disableSaveLastActiveItem && this.id)
      defaultLabel = localStorage.getItem(this.localStorageDefaultItemLabelKeyPrefix + this.id) || undefined;
    if (!defaultLabel)
      defaultLabel = this.defaultItemLabel;

    let index: number = 0;
    if (this._items.length) {
      if (defaultLabel) {
        index = this._items.findIndex(item => item.label == defaultLabel);
      }
      if (!defaultLabel || index < 0) {
        index = this.defaultItemIndex || 0;
      }
      if (index < 0 || index > this._items.length)
        index = 0;
    }
    this._defaultItemIndex = index;
  }

  /**
   * Store the last viewed item as default (if an id is defined),
   * when a new item is selected.
   * @param item The newly viewed item.
   */
  protected onItemClick(item: ItemDefinition): void {
    if (this.disableSaveLastActiveItem || !this.id || !item?.label || item.routerLink) return;

    localStorage.setItem(this.localStorageDefaultItemLabelKeyPrefix + this.id, item.label);
  }

  // endregion

}
